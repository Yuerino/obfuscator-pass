; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -load-pass-plugin %shlibdir/libOpcodeCounter%shlibext -passes="print<opcode-counter>" -disable-output 2>&1 %s | FileCheck %s

define dso_local i32 @foo(i32 noundef %0) #0 {
; CHECK-LABEL: 'foo'
; CHECK-NEXT:  =================================================
; CHECK-NEXT:  OPCODE #TIMES USED
; CHECK-NEXT:  -------------------------------------------------
; CHECK-NEXT:  load 1
; CHECK-NEXT:  ret 1
; CHECK-NEXT:  alloca 1
; CHECK-NEXT:  store 1
; CHECK-NEXT:  mul 1
; CHECK-NEXT:  -------------------------------------------------
;
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = mul nsw i32 %3, 2
  ret i32 %4
}

define dso_local i32 @bar(i32 noundef %0, i32 noundef %1) #0 {
; CHECK-LABEL: 'bar'
; CHECK-NEXT:  =================================================
; CHECK-NEXT:  OPCODE #TIMES USED
; CHECK-NEXT:  -------------------------------------------------
; CHECK-NEXT:  load 2
; CHECK-NEXT:  add 1
; CHECK-NEXT:  ret 1
; CHECK-NEXT:  alloca 2
; CHECK-NEXT:  store 2
; CHECK-NEXT:  mul 1
; CHECK-NEXT:  call 1
; CHECK-NEXT:  -------------------------------------------------
;
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, ptr %3, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load i32, ptr %4, align 4
  %7 = call i32 @foo(i32 noundef %6)
  %8 = mul nsw i32 %7, 2
  %9 = add nsw i32 %5, %8
  ret i32 %9
}

define dso_local i32 @fez(i32 noundef %0, i32 noundef %1, i32 noundef %2) #0 {
; CHECK-LABEL: 'fez'
; CHECK-NEXT:  =================================================
; CHECK-NEXT:  OPCODE #TIMES USED
; CHECK-NEXT:  -------------------------------------------------
; CHECK-NEXT:  load 4
; CHECK-NEXT:  add 2
; CHECK-NEXT:  ret 1
; CHECK-NEXT:  alloca 3
; CHECK-NEXT:  store 3
; CHECK-NEXT:  mul 2
; CHECK-NEXT:  call 1
; CHECK-NEXT:  -------------------------------------------------
;
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, ptr %4, align 4
  store i32 %1, ptr %5, align 4
  store i32 %2, ptr %6, align 4
  %7 = load i32, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = load i32, ptr %5, align 4
  %10 = call i32 @bar(i32 noundef %8, i32 noundef %9)
  %11 = mul nsw i32 %10, 2
  %12 = add nsw i32 %7, %11
  %13 = load i32, ptr %6, align 4
  %14 = mul nsw i32 %13, 3
  %15 = add nsw i32 %12, %14
  ret i32 %15
}

define dso_local i32 @main(i32 noundef %0, ptr noundef %1) #0 {
; CHECK-LABEL: 'main'
; CHECK-NEXT:  =================================================
; CHECK-NEXT:  OPCODE #TIMES USED
; CHECK-NEXT:  -------------------------------------------------
; CHECK-NEXT:  load 9
; CHECK-NEXT:  add 3
; CHECK-NEXT:  ret 1
; CHECK-NEXT:  alloca 5
; CHECK-NEXT:  store 8
; CHECK-NEXT:  call 3
; CHECK-NEXT:  -------------------------------------------------
;
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 0, ptr %3, align 4
  store i32 %0, ptr %4, align 4
  store ptr %1, ptr %5, align 8
  store i32 123, ptr %6, align 4
  store i32 0, ptr %7, align 4
  %8 = load i32, ptr %6, align 4
  %9 = call i32 @foo(i32 noundef %8)
  %10 = load i32, ptr %7, align 4
  %11 = add nsw i32 %10, %9
  store i32 %11, ptr %7, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %7, align 4
  %14 = call i32 @bar(i32 noundef %12, i32 noundef %13)
  %15 = load i32, ptr %7, align 4
  %16 = add nsw i32 %15, %14
  store i32 %16, ptr %7, align 4
  %17 = load i32, ptr %6, align 4
  %18 = load i32, ptr %7, align 4
  %19 = call i32 @fez(i32 noundef %17, i32 noundef %18, i32 noundef 123)
  %20 = load i32, ptr %7, align 4
  %21 = add nsw i32 %20, %19
  store i32 %21, ptr %7, align 4
  %22 = load i32, ptr %7, align 4
  ret i32 %22
}
